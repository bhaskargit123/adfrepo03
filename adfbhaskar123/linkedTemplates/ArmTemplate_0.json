{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfbhaskar123"
		},
		"ls_adls_bhaskaradls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adls_bhaskaradls'"
		},
		"ls_azSQL_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_SOURCE'"
		},
		"ls_azSQL_TARGET_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_TARGET'"
		},
		"ls_adls_bhaskaradls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bhaskaradls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls_bhaskaradls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_bhaskaradls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adls_bhaskaradls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_TARGET')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_TARGET_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datafiles_input_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_bhaskaradls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee.csv",
						"folderPath": "input",
						"fileSystem": "datafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datafiles_input_employee_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_bhaskaradls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee.parquet",
						"folderPath": "input",
						"fileSystem": "datafiles"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_type_II')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerId as integer,",
						"          CustomerName as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT \\n     CustomerId,\\n     CustomerName,\\n     Location,\\n     Sales\\nFROM customer\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
						"source(output(",
						"          CustomerKey as integer,",
						"          CustomerId as integer,",
						"          CustomerName as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT \\n     CustomerKey,\\n     CustomerId,\\n     CustomerName,\\n     Location,\\n     Sales\\nFROM customer\\nWHERE EndDate IS NULL\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
						"srcCustomer select(mapColumn(",
						"          Src_CustomerId = CustomerId,",
						"          Src_CustomerName = CustomerName,",
						"          Src_Location = Location,",
						"          Src_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"trgCustomer select(mapColumn(",
						"          CustomerKey,",
						"          Trg_CustomerId = CustomerId,",
						"          Trg_CustomerName = CustomerName,",
						"          Trg_Location = Location,",
						"          Trg_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"srcSelect, trgSelect lookup(Src_CustomerId == Trg_CustomerId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(isNull(Trg_CustomerId),",
						"     disjoint: false) ~> split1@(NewRecords, ExistedRecords)",
						"split1@NewRecords select(mapColumn(",
						"          CustomerId = Src_CustomerId,",
						"          CustomerName = Src_CustomerName,",
						"          Location = Src_Location,",
						"          Sales = Src_Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@ExistedRecords filter(iif(Src_CustomerName!=Trg_CustomerName || Src_Location!=Trg_Location || Src_Sales!=Trg_Sales, true(), false())) ~> filter1",
						"filter1 select(mapColumn(",
						"          CustomerId = Src_CustomerId,",
						"          CustomerName = Src_CustomerName,",
						"          Location = Src_Location,",
						"          Sales = Src_Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1, select2 union(byName: true)~> union1",
						"union1 derive(StartDate = currentUTC()) ~> derivedColumn1",
						"filter1 select(mapColumn(",
						"          CustomerKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(EndDate = currentUTC()) ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerId,",
						"          CustomerName,",
						"          Location,",
						"          Sales,",
						"          StartDate",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerKey'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          EndDate",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "DeosNotExists"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT\\n     CustomerID,\\n     CustomerName,\\n     Location,\\n     Sales\\nFROM customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Location as string,",
						"          Sales as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT\\n     CustomerID,\\n     CustomerName,\\n     Location,\\n     Sales\\nFROM customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
						"srcCustomer select(mapColumn(",
						"          Src_CustomerID = CustomerID,",
						"          Src_CustomerName = CustomerName,",
						"          Src_Location = Location,",
						"          Src_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"trgCustomer select(mapColumn(",
						"          trg_CustomerID = CustomerID,",
						"          trg_CustomerName = CustomerName,",
						"          trg_Location = Location,",
						"          trg_Sales = Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"srcSelect, trgSelect exists(Src_CustomerID == trg_CustomerID,",
						"     negate:true,",
						"     broadcast: 'auto')~> DeosNotExists",
						"DeosNotExists derive(Flag = 'Inserted') ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          CustomerID = Src_CustomerID,",
						"          CustomerName = Src_CustomerName,",
						"          Location = Src_Location,",
						"          Sales = Src_Sales,",
						"          Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"srcSelect, trgSelect lookup(Src_CustomerID == trg_CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(not(isNull(trg_CustomerID))) ~> filter1",
						"filter1 derive(IsChangedRecds = iif(Src_CustomerName!=trg_CustomerName || Src_Location!=trg_Location || Src_Sales!=trg_Sales, 'Yes', 'No'),",
						"          Flag = 'Updated') ~> derivedColumn2",
						"derivedColumn2 filter(IsChangedRecds=='Yes') ~> filter2",
						"filter2 select(mapColumn(",
						"          CustomerID = Src_CustomerID,",
						"          CustomerName = Src_CustomerName,",
						"          Location = Src_Location,",
						"          Sales = Src_Sales,",
						"          Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          Location,",
						"          Sales,",
						"          Flag",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          Location,",
						"          Sales,",
						"          Flag",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pl_scd_type_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcCustomer": {},
									"trgCustomer": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pl_scd_type_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_II')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd_type_II",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcCustomer": {},
									"trgCustomer": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scd_type_II')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeNo as short,",
						"          Ename as string,",
						"          Job as string,",
						"          Mgr as string,",
						"          Hiredate as date,",
						"          Salary as double,",
						"          Commission as string,",
						"          DepartmentNo as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"srcEmployee select(mapColumn(",
						"          Job,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(Job),",
						"     EmployeeCnt = count(Job),",
						"          Salary = sum(Salary)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_aggr',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee_parquet",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "snkemp10"
						},
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "snkemp20"
						},
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "snkemp30"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeNO as integer,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as integer,",
						"          HIREDATE as date,",
						"          SAL as decimal(19,4),",
						"          COMM as decimal(19,4),",
						"          DepartmentNO as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> srcEmployee",
						"srcEmployee split(DepartmentNO==10,",
						"     DepartmentNO==20,",
						"     DepartmentNO==30,",
						"     disjoint: false) ~> split1@(emp10, emp20, emp30)",
						"split1@emp10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_10',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> snkemp10",
						"split1@emp20 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_20',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> snkemp20",
						"split1@emp30 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'avro',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_30',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> snkemp30"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_derived_column')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeNo as short,",
						"          Ename as string,",
						"          Job as string,",
						"          Mgr as integer,",
						"          Hiredate as date,",
						"          Salary as double,",
						"          Commission as double,",
						"          DepartmentNo as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"srcEmployee derive(Hike = case(\r",
						"    DepartmentNo==10, Salary*0.1,\r",
						"    DepartmentNo==20, Salary*0.2,\r",
						"    Salary*0.3\r",
						")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_hike',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_filter_tr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "snkEmployee"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeNO as short,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as short,",
						"          HIREDATE as date,",
						"          SAL as double,",
						"          COMM as double,",
						"          DepartmentNO as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"srcEmployee filter(not(year(HIREDATE)==1981)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeNO,",
						"          ENAME,",
						"          JOB,",
						"          MGR,",
						"          HIREDATE,",
						"          SAL,",
						"          COMM,",
						"          DepartmentNO",
						"     )) ~> snkEmployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						},
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "srcDepartment"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeNo as short,",
						"          Ename as string,",
						"          Job as string,",
						"          Mgr as string,",
						"          Hiredate as date,",
						"          Salary as double,",
						"          Commission as double,",
						"          DepartmentNo as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"source(output(",
						"          DepartmentNO as short,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'input',",
						"     fileName: 'department.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> srcDepartment",
						"srcEmployee, srcDepartment join(srcEmployee@DepartmentNo == srcDepartment@DepartmentNO,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_join',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_select_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "snk1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeNo as short,",
						"          Ename as string,",
						"          Job as string,",
						"          Mgr as string,",
						"          Hiredate as date,",
						"          Salary as double,",
						"          Commission as string,",
						"          DepartmentNo as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"srcEmployee select(mapColumn(",
						"          EmployeeNo,",
						"          Ename,",
						"          Job,",
						"          DepartmentNo,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee_select',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> snk1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_withut_transformations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_datafiles_input_employee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_bhaskaradls",
								"type": "LinkedServiceReference"
							},
							"name": "snkEmployee"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          EmployeeNO as short,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as short,",
						"          HIREDATE as date,",
						"          SAL as double,",
						"          COMM as double,",
						"          DepartmentNO as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEmployee",
						"srcEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'datafiles',",
						"     folderPath: 'output/employee',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeNO,",
						"          ENAME,",
						"          JOB,",
						"          MGR,",
						"          HIREDATE,",
						"          SAL,",
						"          COMM,",
						"          DepartmentNO",
						"     )) ~> snkEmployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_employee')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-29T14:30:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_aggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"snkemp10": {},
									"snkemp20": {},
									"snkemp30": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-28T14:27:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataflow_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_withut_transformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"snkEmployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-27T14:40:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_withut_transformations')]"
			]
		}
	]
}